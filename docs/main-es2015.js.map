{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/api.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/weather/city/city.component.html","./src/app/weather/city/city.component.ts","./src/app/weather/weather.component.html","./src/app/weather/weather.component.ts","./src/app/weather/weather.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAA0D;;;AAKnD,MAAM,UAAU;IAKrB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAHpC,kBAAa,GAAG,qEAAW,CAAC,MAAM,CAAC;QACnC,UAAK,GAAG,qEAAW,CAAC,KAAK,CAAC;QAC1B,SAAI,GAAG,qEAAW,CAAC,IAAI,CAAC;IACgB,CAAC;IAEzC,0BAA0B,CAAC,MAAM;QAC/B,MAAM,OAAO,GAAG,GAAG,IAAI,CAAC,aAAa,YAAY,MAAM,UAAU,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC,KAAK,EAAE,CAAC;QACjG,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IAED,oBAAoB,CAAC,QAAQ;QAC3B,MAAM,OAAO,GAAG,GAAG,IAAI,CAAC,aAAa,cAAc,QAAQ,UAAU,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC,KAAK,EAAE,CAAC;QACrG,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;;;;;;;;;;;;;;;ACrBH;AAAA;AAAA;AAAA;AAAA;AAAuD;AACO;AACC;AAG/D,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,2EAAgB,EAAE;IACzC,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,EAAE,0EAAa,EAAE;CACjD,CAAC;AAMK,MAAM,gBAAgB;CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kGCfjC,0HAAQ,KACJ,yIAAmB,+GAAkC,MACrD,+IAAyB,KAE7B,wHAAM,KACF,8lBAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEnB;AAAA;AAAO,MAAM,YAAY;IALzB;QAME,UAAK,GAAG,aAAa,CAAC;IACxB,CAAC;CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACgBD;AAAA;AAAO,MAAM,SAAS;CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mGCTV,sHAAkC,KAC9B,sHAAI,gFAAiB,MACrB,sHAAI,gFAAoB,MACxB,sHAAI,gFAAyB,iCAFzB,oEAAiB,GACjB,uEAAoB,GACpB,4EAAyB;mGAJrC,yHAA6B,KACzB,+cAAkC,iDAA9B,mBAA6B,WAAjC,YAAkC,EAA9B,SAA6B;mGAOjC,sHAAyB,sGAAyB;mGAvBlE,8IAAuB,KACnB,wIAAiB,KACb,6IAAuB,KACnB,gJAA0B,KACtB,sHAAI,wFAAkB,MAG9B,2JAAoC,KAChC,yHAAO,KACH,sHAAI,KACA,sHAAI,sFAAS,MACb,uHAAI,+FAAmB,MACvB,uHAAI,4FAAe,MAG3B,uYAA6B,IAO7B,0HAAO,KACH,uYAAyB,iDARtB,oBAAqB,eAA5B,aAA6B,EAAtB,SAAqB,GAQpB,mBAAoB,eAAxB,aAAyB,EAArB,SAAoB,mDAnBpB,iDAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJtC;AAAA;AAAA;AAAkD;AAS3C,MAAM,aAAa;IAKxB,YAAoB,KAAqB,EAC/B,MAAc,EACd,UAAsB;QAFZ,UAAK,GAAL,KAAK,CAAgB;QAC/B,WAAM,GAAN,MAAM,CAAQ;QACd,eAAU,GAAV,UAAU,CAAY;QAJhC,aAAQ,GAAG,EAAE,CAAC;IAIsB,CAAC;IAErC,QAAQ;QACN,IAAI,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3D,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACpC,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACnC,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;gBAC9D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;gBAC9B,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;oBAC/C,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;oBACpC,OAAO,cAAc,GAAG,QAAQ,CAAC;gBACnC,CAAC,CAAC;gBACF,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC;YAC/B,CAAC,EACC,KAAK,CAAC,EAAE;gBACN,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YAC3B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oBAAoB,CAAC,SAAS,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG;QAChD,IAAI,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QAC7B,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,CAAC;QACvD,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC/B,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAC5B,WAAW,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QACjC,OAAO,WAAW,CAAC;IACrB,CAAC;CAGF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sGC5CO,4IAA0D,KACtD,iMAA8D,YAAzD;;wBAAsC;MAA3C,wBAA8D,KAC1D,sHAAI,gFAAkB,MACtB,gJAA0B,4FAAoC,MAC9D,gJAA0B,yFAAiD,MAC3E,gJAA0B,wFAA+C,yDAHrE,kEAAkB,GACI,uEAAoC,GACpC,4FAAiD,GACjD,2FAA+C;sGAPzF,6IAAuB,KACnB,uIAAiB,KACb,kdAA0D,iDAArD,mBAAmC,cAAxC,YAA0D,EAArD,SAAmC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFhD;AAAA;AAAA;AAAkD;AAU3C,MAAM,gBAAgB;IAyB3B,YACU,UAAsB,EACtB,MAAc,EACd,cAA8B;QAF9B,eAAU,GAAV,UAAU,CAAY;QACtB,WAAM,GAAN,MAAM,CAAQ;QACd,mBAAc,GAAd,cAAc,CAAgB;QA1BxC,aAAQ,GAAG;YACT;gBACE,QAAQ,EAAE,QAAQ;gBAClB,MAAM,EAAE,OAAO;aAChB;YACD;gBACE,QAAQ,EAAE,QAAQ;gBAClB,MAAM,EAAE,OAAO;aAChB;YACD;gBACE,QAAQ,EAAE,OAAO;gBACjB,MAAM,EAAE,OAAO;aAChB;YACD;gBACE,QAAQ,EAAE,QAAQ;gBAClB,MAAM,EAAE,OAAO;aAChB;YACD;gBACE,QAAQ,EAAE,UAAU;gBACpB,MAAM,EAAE,OAAO;aAChB;SACF,CAAC;QACK,gBAAW,GAAG,EAAE,CAAC;IAKpB,CAAC;IAEL,QAAQ;QACN,IAAI,CAAC,0BAA0B,EAAE,CAAC;IACpC,CAAC;IAED,0BAA0B;QACxB,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC;QAC5D,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACvD,MAAM,aAAa,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1C,MAAM,WAAW,GAAG,aAAa,CAAC;QAClC,IAAI,cAAc,EAAE;YAClB,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC;SACnC;aAAM;YACL,IAAI,CAAC,UAAU,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;gBACvE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;gBAChC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,cAAc,CAAC,QAAQ;QACrB,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC,iBAAiB,EAAE,CAAC;QACjD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED,aAAa,CAAC,cAAc;QAC1B,+CAA+C;QAC/C,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC;QACxC,IAAI,MAAM,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAClG,IAAI,IAAI,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3B,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjC,IAAI,IAAI,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;QACvB,IAAI,IAAI,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;QACxB,IAAI,GAAG,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;QACzB,IAAI,GAAG,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;QACzB,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;QAChF,OAAO,IAAI,CAAC;IACd,CAAC;CAKF;;;;;;;;;;;;;;;;;AC7EM,MAAM,cAAc;IAGzB,gBAAgB,CAAC;IAEjB,cAAc,CAAC,IAAI;QACjB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;;;;;;;;;;;;;;;AChBH;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,MAAM,EAAE,0CAA0C;IAClD,KAAK,EAAE,kCAAkC;IACzC,IAAI,EAAE,QAAQ;CACf,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;AClBnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,uBAAgB,CAAC,6EAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { environment } from '../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  apiWeatherUrl = environment.apiUrl;\n  appId = environment.appId;\n  unit = environment.unit;\n  constructor(private http: HttpClient) { }\n\n  getWeatherByMultipleCityId(cityId) {\n    const apiCall = `${this.apiWeatherUrl}group?id=${cityId}&units=${this.unit}&APPID=${this.appId}`;\n    return this.http.get(apiCall);\n  }\n\n  getWeatherByCityName(cityName) {\n    const apiCall = `${this.apiWeatherUrl}forecast?q=${cityName}&units=${this.unit}&APPID=${this.appId}`;\n    return this.http.get(apiCall);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CityComponent } from './weather/city/city.component';\nimport { WeatherComponent } from './weather/weather.component';\n\n\nconst routes: Routes = [\n  { path: '', component: WeatherComponent },\n  { path: 'city/:city', component: CityComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","<header>\r\n    <h2 class=\"center\">Weather Data for 5 European Cities</h2>\r\n    <div class=\"border-line\"></div>\r\n</header>\r\n<main>\r\n    <router-outlet></router-outlet>\r\n</main>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'weather-app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { WeatherComponent } from './weather/weather.component';\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { CityComponent } from './weather/city/city.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    WeatherComponent,\n    CityComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"city-details\">\n                <h1>{{ city }} details</h1>\n            </div>\n        </div>\n        <table class=\"table table-bordered\">\n            <thead>\n                <tr>\n                    <th>Date Time</th>\n                    <th>Temperature &#8451;</th>\n                    <th>Sea Level (hPa)</th>\n                </tr>\n            </thead>\n            <tbody *ngIf=\"!failedToLoad\">\n                <tr *ngFor=\"let city of cityData\">\n                    <td>{{ city.dt_txt }}</td>\n                    <td>{{ city.main.temp }}</td>\n                    <td>{{ city.main.sea_level }}</td>\n                </tr>\n            </tbody>\n            <tbody>\n                <tr *ngIf=\"failedToLoad\">No data for city is found</tr>\n            </tbody>\n        </table>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiService } from \"../../api.service\";\n\n@Component({\n  selector: 'app-city',\n  templateUrl: './city.component.html',\n  styleUrls: ['./city.component.scss']\n})\nexport class CityComponent implements OnInit {\n\n  city: string;\n  cityData = [];\n  failedToLoad: boolean;\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private apiService: ApiService) { }\n\n  ngOnInit() {\n    let getUpdatedDate = this.addDaysToCurrentDate(5, 9, 0, 0);\n    this.route.paramMap.subscribe(route => {\n      const cityName = route.get('city');\n      this.apiService.getWeatherByCityName(cityName).subscribe(data => {\n        this.city = data['city'].name;\n        const filteredData = data['list'].filter((val) => {\n          let dateList = new Date(val.dt_txt);\n          return getUpdatedDate > dateList;\n        })\n        this.cityData = filteredData;\n      },\n        error => {\n          this.failedToLoad = true;\n        });\n    });\n  }\n\n  addDaysToCurrentDate(daysToAdd, setHours, min, sec) {\n    var currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() + daysToAdd);\n    currentDate.setHours(setHours);\n    currentDate.setMinutes(min);\n    currentDate.setMilliseconds(sec);\n    return currentDate;\n  }\n\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div *ngFor=\"let weather of weatherData\" class=\"col-md-3\">\n            <div (click)=\"navigateToCity(weather.name)\" class=\"city-list\">\n                <h1>{{ weather.name }}</h1>\n                <div class=\"city-details\">Temp: {{ weather.main.temp }}&#8451;</div>\n                <div class=\"city-details\">Sunrise: {{ timeConverter(weather.sys.sunrise) }}</div>\n                <div class=\"city-details\">Sunset: {{ timeConverter(weather.sys.sunset) }}</div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ApiService } from \"../api.service\";\nimport { Router } from '@angular/router';\nimport { WeatherService } from './weather.service';\n\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.scss']\n})\nexport class WeatherComponent implements OnInit {\n\n  cityList = [\n    {\n      cityName: 'London',\n      cityId: 2643743\n    },\n    {\n      cityName: 'Monaco',\n      cityId: 2993458\n    },\n    {\n      cityName: 'Paris',\n      cityId: 6455259\n    },\n    {\n      cityName: 'Poland',\n      cityId: 5167196\n    },\n    {\n      cityName: 'Portugal',\n      cityId: 6112032\n    },\n  ];\n  public weatherData = [];\n  constructor(\n    private apiService: ApiService,\n    private router: Router,\n    private weatherService: WeatherService\n  ) { }\n\n  ngOnInit() {\n    this.getWeatherByMultipleCityId();\n  }\n\n  getWeatherByMultipleCityId() {\n    const getWeatherData = this.weatherService.getWeatherData();\n    const getCityId = this.cityList.map(val => val.cityId);\n    const multiplCityId = getCityId.join(',');\n    const queryParams = multiplCityId;\n    if (getWeatherData) {\n      this.weatherData = getWeatherData;\n    } else {\n      this.apiService.getWeatherByMultipleCityId(queryParams).subscribe(data => {\n        this.weatherData = data['list'];\n        this.weatherService.setWeatherData(this.weatherData);\n      });\n    }\n  }\n\n  navigateToCity(cityName) {\n    const city = cityName.trim().toLocaleLowerCase();\n    this.router.navigate(['/city/' + city]);\n  }\n\n  timeConverter(UNIX_timestamp) {\n    //multiply by 1000 to convert into milliseconds\n    var a = new Date(UNIX_timestamp * 1000);\n    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    var year = a.getFullYear();\n    var month = months[a.getMonth()];\n    var date = a.getDate();\n    var hour = a.getHours();\n    var min = a.getMinutes();\n    var sec = a.getSeconds();\n    var time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n    return time;\n  }\n\n\n\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  weatherData: [];\n  constructor() { }\n\n  setWeatherData(data) {\n    this.weatherData = data;\n  }\n\n  getWeatherData() {\n    return this.weatherData;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: \"https://api.openweathermap.org/data/2.5/\",\n  appId: \"11beac804d2527027771204d95f86d63\",\n  unit: \"metric\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}