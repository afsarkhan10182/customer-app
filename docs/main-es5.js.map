{"version":3,"sources":["$_lazy_route_resource lazy namespace object","src/app/api.service.ts","src/app/app-routing.module.ts","src/app/app.component.html","src/app/app.component.ts","src/app/app.module.ts","src/app/weather/city/city.component.html","src/app/weather/city/city.component.ts","src/app/weather/weather.component.html","src/app/weather/weather.component.ts","src/app/weather/weather.service.ts","src/environments/environment.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { environment } from '../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  apiWeatherUrl = environment.apiUrl;\n  appId = environment.appId;\n  unit = environment.unit;\n  constructor(private http: HttpClient) { }\n\n  getWeatherByMultipleCityId(cityId) {\n    const apiCall = `${this.apiWeatherUrl}group?id=${cityId}&units=${this.unit}&APPID=${this.appId}`;\n    return this.http.get(apiCall);\n  }\n\n  getWeatherByCityName(cityName) {\n    const apiCall = `${this.apiWeatherUrl}forecast?q=${cityName}&units=${this.unit}&APPID=${this.appId}`;\n    return this.http.get(apiCall);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CityComponent } from './weather/city/city.component';\nimport { WeatherComponent } from './weather/weather.component';\n\n\nconst routes: Routes = [\n  { path: '', component: WeatherComponent },\n  { path: 'city/:city', component: CityComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","<header>\r\n    <h2 class=\"center\">Weather Data for 5 European Cities</h2>\r\n    <div class=\"border-line\"></div>\r\n</header>\r\n<main>\r\n    <router-outlet></router-outlet>\r\n</main>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'weather-app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { WeatherComponent } from './weather/weather.component';\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { CityComponent } from './weather/city/city.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    WeatherComponent,\n    CityComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"city-details\">\n                <h1>{{ city }} details</h1>\n            </div>\n        </div>\n        <table class=\"table table-bordered\">\n            <thead>\n                <tr>\n                    <th>Date Time</th>\n                    <th>Temperature &#8451;</th>\n                    <th>Sea Level (hPa)</th>\n                </tr>\n            </thead>\n            <tbody *ngIf=\"!failedToLoad\">\n                <tr *ngFor=\"let city of cityData\">\n                    <td>{{ city.dt_txt }}</td>\n                    <td>{{ city.main.temp }}</td>\n                    <td>{{ city.main.sea_level }}</td>\n                </tr>\n            </tbody>\n            <tbody>\n                <tr *ngIf=\"failedToLoad\">No data for city is found</tr>\n            </tbody>\n        </table>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiService } from \"../../api.service\";\n\n@Component({\n  selector: 'app-city',\n  templateUrl: './city.component.html',\n  styleUrls: ['./city.component.scss']\n})\nexport class CityComponent implements OnInit {\n\n  city: string;\n  cityData = [];\n  failedToLoad: boolean;\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private apiService: ApiService) { }\n\n  ngOnInit() {\n    let getUpdatedDate = this.addDaysToCurrentDate(5, 9, 0, 0);\n    this.route.paramMap.subscribe(route => {\n      const cityName = route.get('city');\n      this.apiService.getWeatherByCityName(cityName).subscribe(data => {\n        this.city = data['city'].name;\n        const filteredData = data['list'].filter((val) => {\n          let dateList = new Date(val.dt_txt);\n          return getUpdatedDate > dateList;\n        })\n        this.cityData = filteredData;\n      },\n        error => {\n          this.failedToLoad = true;\n        });\n    });\n  }\n\n  addDaysToCurrentDate(daysToAdd, setHours, min, sec) {\n    var currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() + daysToAdd);\n    currentDate.setHours(setHours);\n    currentDate.setMinutes(min);\n    currentDate.setMilliseconds(sec);\n    return currentDate;\n  }\n\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div *ngFor=\"let weather of weatherData\" class=\"col-md-3\">\n            <div (click)=\"navigateToCity(weather.name)\" class=\"city-list\">\n                <h1>{{ weather.name }}</h1>\n                <div class=\"city-details\">Temp: {{ weather.main.temp }}&#8451;</div>\n                <div class=\"city-details\">Sunrise: {{ timeConverter(weather.sys.sunrise) }}</div>\n                <div class=\"city-details\">Sunset: {{ timeConverter(weather.sys.sunset) }}</div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ApiService } from \"../api.service\";\nimport { Router } from '@angular/router';\nimport { WeatherService } from './weather.service';\n\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.scss']\n})\nexport class WeatherComponent implements OnInit {\n\n  cityList = [\n    {\n      cityName: 'London',\n      cityId: 2643743\n    },\n    {\n      cityName: 'Monaco',\n      cityId: 2993458\n    },\n    {\n      cityName: 'Paris',\n      cityId: 6455259\n    },\n    {\n      cityName: 'Poland',\n      cityId: 5167196\n    },\n    {\n      cityName: 'Portugal',\n      cityId: 6112032\n    },\n  ];\n  public weatherData = [];\n  constructor(\n    private apiService: ApiService,\n    private router: Router,\n    private weatherService: WeatherService\n  ) { }\n\n  ngOnInit() {\n    this.getWeatherByMultipleCityId();\n  }\n\n  getWeatherByMultipleCityId() {\n    const getWeatherData = this.weatherService.getWeatherData();\n    const getCityId = this.cityList.map(val => val.cityId);\n    const multiplCityId = getCityId.join(',');\n    const queryParams = multiplCityId;\n    if (getWeatherData) {\n      this.weatherData = getWeatherData;\n    } else {\n      this.apiService.getWeatherByMultipleCityId(queryParams).subscribe(data => {\n        this.weatherData = data['list'];\n        this.weatherService.setWeatherData(this.weatherData);\n      });\n    }\n  }\n\n  navigateToCity(cityName) {\n    const city = cityName.trim().toLocaleLowerCase();\n    this.router.navigate(['/city/' + city]);\n  }\n\n  timeConverter(UNIX_timestamp) {\n    //multiply by 1000 to convert into milliseconds\n    var a = new Date(UNIX_timestamp * 1000);\n    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    var year = a.getFullYear();\n    var month = months[a.getMonth()];\n    var date = a.getDate();\n    var hour = a.getHours();\n    var min = a.getMinutes();\n    var sec = a.getSeconds();\n    var time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;\n    return time;\n  }\n\n\n\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  weatherData: [];\n  constructor() { }\n\n  setWeatherData(data) {\n    this.weatherData = data;\n  }\n\n  getWeatherData() {\n    return this.weatherData;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: \"https://api.openweathermap.org/data/2.5/\",\n  appId: \"11beac804d2527027771204d95f86d63\",\n  unit: \"metric\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///","file":"main-es5.js"}